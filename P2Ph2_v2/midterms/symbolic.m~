%The symbolic part of matlab to calculate jacobian
%{Ft and Vt from the notes}

X = sym('X', [15 1]); %State Vector: [pos orientation vel IMUVelocityBias IMUAccelerationBias]
V = sym('V', [6 1]); %Accelerometer Input: [vel acc]
errN = sym('errN', [9 1]); %IMU Error + time varying bias
%deltaT = sym('deltaT'); %Next step time difference

Rq = RPYToRotMat(X(4:6)); %4-6 = roll, pitch, yaw
Gq = [cos(X(5,1)) 0 -(cos(X(4,1))*sin(X(5,1)));...
      0 1 sin(X(4,1));...
      sin(X(5,1)) 0 cos(X(4,1))*cos(X(5,1))];
gra = [0; 0; 9.8];
%temp2 = (V + errN(1:6)) * deltaT;


%Compute the Process Equation and Corresponding Jacobians
%In 14 Dim Version, subtract the tracked bias from accelerometer. (0-mean gaussian noise)
% g = [X(1:3) + X(4:6)*deltaT + (((Rq * (V(1:3)-X(10:12)+errN(1:3))) - [.4109;.4024;9.6343])*deltaT^2/2); ...
%     X(4:6) + (((Rq * (V(1:3)-X(10:12)+errN(1:3))) - [.4109;.4024;9.6343])*deltaT); ...
%      RotMatToRPY(Rq * RPYToRotMat(temp2(4:6))); ...
%      X(10:12) + (errN(7:9)*deltaT); ...
%      X(13:14)]; 
 
f = [X(7:9);...  
    Gq\(V(4:6)-X(10:12)-errN(1:3));...
    gra + Rq*(V(4:6)-X(13:15)-errN(4:6));...
    errN(7:9);...
    0;0;0];

%g = simplify(g); %14x1
f = simplify(f);

%gEqn = matlabFunction(g);
%fEqn = matlabFunction(f, 'Vars',[X V errN]);
 fEqn = matlabFunction(f);

%G = jacobian(g, X); %14x14
At = jacobian(f, X); %15x15
%L = jacobian(g, errN); %14x9
Ut = jacobian(f, errN); %15x9

AtFunc = matlabFunction(At, 'Vars', [f X]);
UtFunc = matlabFunction(Ut,'Vars', [f errN]);